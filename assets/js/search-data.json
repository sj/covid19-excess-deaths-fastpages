{
  
    
        "post0": {
            "title": "World-wide excess deaths in the time of COVID-19",
            "content": "import pandas as pd import altair as alt import numpy as np import scipy.stats as st . df = pd.read_csv(&quot;https://raw.githubusercontent.com/sj/covid19-excess-deaths-data/master/weekly-deaths.csv&quot;, sep=&#39;;&#39;, parse_dates=[&#39;first_day&#39;, &#39;last_day&#39;]) ## Create separate column containing the year of the measurement. Will be used to split up ## years in different data series in the visualisation. df[&#39;first_day:year&#39;] = df[&#39;first_day&#39;].dt.year df[&#39;last_day:year&#39;] = df[&#39;last_day&#39;].dt.year ## Create column for day-of-the-year to plot the different series for the different years df[&#39;first_day:yday&#39;] = df[&#39;first_day&#39;].dt.strftime(&#39;%j&#39;).astype(int) df[&#39;last_day:yday&#39;] = df[&#39;last_day&#39;].dt.strftime(&#39;%j&#39;).astype(int) ## Create column for the middle day df[&#39;middle_day:yday&#39;] = (df[&#39;first_day:yday&#39;] + (df[&#39;last_day:yday&#39;] - df[&#39;first_day:yday&#39;]) / 2.0).astype(int) ## To investigate/display the entire dataset, uncomment the following: #with pd.option_context(&#39;display.max_rows&#39;, 2000): display(df) . country first_day last_day filter deaths source notes first_day:year last_day:year first_day:yday last_day:yday middle_day:yday . 0 NL | 1995-01-02 | 1995-01-08 | NaN | 2719 | https://opendata.cbs.nl/statline/#/CBS/nl/data... | Previous week straddled two years and was skip... | 1995 | 1995 | 2 | 8 | 5 | . 1 NL | 1995-01-09 | 1995-01-15 | NaN | 2823 | NaN | NaN | 1995 | 1995 | 9 | 15 | 12 | . 2 NL | 1995-01-16 | 1995-01-22 | NaN | 2609 | NaN | NaN | 1995 | 1995 | 16 | 22 | 19 | . 3 NL | 1995-01-23 | 1995-01-29 | NaN | 2664 | NaN | NaN | 1995 | 1995 | 23 | 29 | 26 | . 4 NL | 1995-01-30 | 1995-02-05 | NaN | 2577 | NaN | NaN | 1995 | 1995 | 30 | 36 | 33 | . 5 NL | 1995-02-06 | 1995-02-12 | NaN | 2536 | NaN | NaN | 1995 | 1995 | 37 | 43 | 40 | . 6 NL | 1995-02-13 | 1995-02-19 | NaN | 2551 | NaN | NaN | 1995 | 1995 | 44 | 50 | 47 | . 7 NL | 1995-02-20 | 1995-02-26 | NaN | 2510 | NaN | NaN | 1995 | 1995 | 51 | 57 | 54 | . 8 NL | 1995-02-27 | 1995-03-05 | NaN | 2490 | NaN | NaN | 1995 | 1995 | 58 | 64 | 61 | . 9 NL | 1995-03-06 | 1995-03-12 | NaN | 2770 | NaN | NaN | 1995 | 1995 | 65 | 71 | 68 | . 10 NL | 1995-03-13 | 1995-03-19 | NaN | 2800 | NaN | NaN | 1995 | 1995 | 72 | 78 | 75 | . 11 NL | 1995-03-20 | 1995-03-26 | NaN | 2786 | NaN | NaN | 1995 | 1995 | 79 | 85 | 82 | . 12 NL | 1995-03-27 | 1995-04-02 | NaN | 2634 | NaN | NaN | 1995 | 1995 | 86 | 92 | 89 | . 13 NL | 1995-04-03 | 1995-04-09 | NaN | 2717 | NaN | NaN | 1995 | 1995 | 93 | 99 | 96 | . 14 NL | 1995-04-10 | 1995-04-16 | NaN | 2645 | NaN | NaN | 1995 | 1995 | 100 | 106 | 103 | . 15 NL | 1995-04-17 | 1995-04-23 | NaN | 2691 | NaN | NaN | 1995 | 1995 | 107 | 113 | 110 | . 16 NL | 1995-04-24 | 1995-04-30 | NaN | 2645 | NaN | NaN | 1995 | 1995 | 114 | 120 | 117 | . 17 NL | 1995-05-01 | 1995-05-07 | NaN | 2628 | NaN | NaN | 1995 | 1995 | 121 | 127 | 124 | . 18 NL | 1995-05-08 | 1995-05-14 | NaN | 2486 | NaN | NaN | 1995 | 1995 | 128 | 134 | 131 | . 19 NL | 1995-05-15 | 1995-05-21 | NaN | 2482 | NaN | NaN | 1995 | 1995 | 135 | 141 | 138 | . 20 NL | 1995-05-22 | 1995-05-28 | NaN | 2468 | NaN | NaN | 1995 | 1995 | 142 | 148 | 145 | . 21 NL | 1995-05-29 | 1995-06-04 | NaN | 2485 | NaN | NaN | 1995 | 1995 | 149 | 155 | 152 | . 22 NL | 1995-06-05 | 1995-06-11 | NaN | 2319 | NaN | NaN | 1995 | 1995 | 156 | 162 | 159 | . 23 NL | 1995-06-12 | 1995-06-18 | NaN | 2352 | NaN | NaN | 1995 | 1995 | 163 | 169 | 166 | . 24 NL | 1995-06-19 | 1995-06-25 | NaN | 2498 | NaN | NaN | 1995 | 1995 | 170 | 176 | 173 | . 25 NL | 1995-06-26 | 1995-07-02 | NaN | 2663 | NaN | NaN | 1995 | 1995 | 177 | 183 | 180 | . 26 NL | 1995-07-03 | 1995-07-09 | NaN | 2489 | NaN | NaN | 1995 | 1995 | 184 | 190 | 187 | . 27 NL | 1995-07-10 | 1995-07-16 | NaN | 2808 | NaN | NaN | 1995 | 1995 | 191 | 197 | 194 | . 28 NL | 1995-07-17 | 1995-07-23 | NaN | 2451 | NaN | NaN | 1995 | 1995 | 198 | 204 | 201 | . 29 NL | 1995-07-24 | 1995-07-30 | NaN | 2466 | NaN | NaN | 1995 | 1995 | 205 | 211 | 208 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1270 NL | 2019-09-23 | 2019-09-29 | NaN | 2753 | NaN | NaN | 2019 | 2019 | 266 | 272 | 269 | . 1271 NL | 2019-09-30 | 2019-10-06 | NaN | 2713 | NaN | NaN | 2019 | 2019 | 273 | 279 | 276 | . 1272 NL | 2019-10-07 | 2019-10-13 | NaN | 2911 | NaN | NaN | 2019 | 2019 | 280 | 286 | 283 | . 1273 NL | 2019-10-14 | 2019-10-20 | NaN | 2877 | NaN | NaN | 2019 | 2019 | 287 | 293 | 290 | . 1274 NL | 2019-10-21 | 2019-10-27 | NaN | 2867 | NaN | NaN | 2019 | 2019 | 294 | 300 | 297 | . 1275 NL | 2019-10-28 | 2019-11-03 | NaN | 2852 | NaN | NaN | 2019 | 2019 | 301 | 307 | 304 | . 1276 NL | 2019-11-04 | 2019-11-10 | NaN | 3011 | NaN | NaN | 2019 | 2019 | 308 | 314 | 311 | . 1277 NL | 2019-11-11 | 2019-11-17 | NaN | 3057 | NaN | NaN | 2019 | 2019 | 315 | 321 | 318 | . 1278 NL | 2019-11-18 | 2019-11-24 | NaN | 3019 | NaN | NaN | 2019 | 2019 | 322 | 328 | 325 | . 1279 NL | 2019-11-25 | 2019-12-01 | NaN | 3037 | NaN | NaN | 2019 | 2019 | 329 | 335 | 332 | . 1280 NL | 2019-12-02 | 2019-12-08 | NaN | 3013 | NaN | NaN | 2019 | 2019 | 336 | 342 | 339 | . 1281 NL | 2019-12-09 | 2019-12-15 | NaN | 3148 | NaN | NaN | 2019 | 2019 | 343 | 349 | 346 | . 1282 NL | 2019-12-16 | 2019-12-22 | NaN | 3235 | NaN | NaN | 2019 | 2019 | 350 | 356 | 353 | . 1283 NL | 2019-12-23 | 2019-12-29 | NaN | 2997 | NaN | NaN | 2019 | 2019 | 357 | 363 | 360 | . 1284 NL | 2020-01-06 | 2020-01-12 | NaN | 3364 | NaN | Previous week (2020-W1) straddles two years an... | 2020 | 2020 | 6 | 12 | 9 | . 1285 NL | 2020-01-13 | 2020-01-19 | NaN | 3152 | NaN | NaN | 2020 | 2020 | 13 | 19 | 16 | . 1286 NL | 2020-01-20 | 2020-01-26 | NaN | 3041 | NaN | NaN | 2020 | 2020 | 20 | 26 | 23 | . 1287 NL | 2020-01-27 | 2020-02-02 | NaN | 3158 | NaN | NaN | 2020 | 2020 | 27 | 33 | 30 | . 1288 NL | 2020-02-03 | 2020-02-09 | NaN | 3189 | NaN | NaN | 2020 | 2020 | 34 | 40 | 37 | . 1289 NL | 2020-02-10 | 2020-02-16 | NaN | 3195 | NaN | NaN | 2020 | 2020 | 41 | 47 | 44 | . 1290 NL | 2020-02-17 | 2020-02-23 | NaN | 2955 | NaN | NaN | 2020 | 2020 | 48 | 54 | 51 | . 1291 NL | 2020-02-24 | 2020-03-01 | NaN | 3089 | NaN | NaN | 2020 | 2020 | 55 | 61 | 58 | . 1292 NL | 2020-03-02 | 2020-03-08 | NaN | 3094 | NaN | NaN | 2020 | 2020 | 62 | 68 | 65 | . 1293 NL | 2020-03-09 | 2020-03-15 | NaN | 3213 | NaN | NaN | 2020 | 2020 | 69 | 75 | 72 | . 1294 NL | 2020-03-16 | 2020-03-22 | NaN | 3600 | NaN | NaN | 2020 | 2020 | 76 | 82 | 79 | . 1295 NL | 2020-03-23 | 2020-03-29 | NaN | 4441 | NaN | NaN | 2020 | 2020 | 83 | 89 | 86 | . 1296 NL | 2020-03-30 | 2020-04-05 | NaN | 5073 | NaN | NaN | 2020 | 2020 | 90 | 96 | 93 | . 1297 NL | 2020-04-06 | 2020-04-12 | NaN | 4955 | NaN | NaN | 2020 | 2020 | 97 | 103 | 100 | . 1298 NL | 2020-04-13 | 2020-04-19 | NaN | 4264 | NaN | NaN | 2020 | 2020 | 104 | 110 | 107 | . 1299 NL | 2020-04-20 | 2020-04-26 | NaN | 4028 | NaN | NaN | 2020 | 2020 | 111 | 117 | 114 | . 1300 rows × 12 columns . # Select pre-COVID data (everything before 2020) and build confidence range df_precovid = df[df[&#39;first_day:year&#39;] &lt; 2020] ## There must be a neater way to do this with Pandas, but for now we&#39;ll use this way to calculate ## a rolling-window mean and stddev for every day of the year. window_prefix_postfix = 14 # 5 days before every day, the day itself, 5 days after every day ydays_means_stdevs = [] means = [] stdevs = [] for yday in range (1, 366): window_first = yday - window_prefix_postfix - 1 window_last = yday + window_prefix_postfix window_ydays = range(window_first + 365, window_last + 365) window_ydays = [(yday % 365) + 1 for yday in window_ydays] # If window straddles multiple years, also include data from 366th day (for leap years) if window_ydays[0] &gt; window_ydays[-1]: window_ydays.append(366) #print(str(yday) + &quot;: &quot; + str(window_ydays)) df_relevant = df_precovid[df_precovid[&#39;middle_day:yday&#39;].isin(window_ydays)] ydays_means_stdevs.append([yday, df_relevant[&#39;deaths&#39;].mean(), df_relevant[&#39;deaths&#39;].std(), df_relevant[&#39;deaths&#39;].count()]) # Account for leap years. Mean and stddev of day 366 is same as for day 365 ydays_means_stdevs.append(ydays_means_stdevs[-1]) ydays_means_stdevs[-1][0] = 366 df_ydays_means_stdevs = pd.DataFrame(ydays_means_stdevs, columns = [&quot;yday&quot;, &quot;mean&quot;, &quot;stdev&quot;, &quot;sample_size&quot;]) # Define 68% (1 stdev) and 95% (2 stdev) confidence intervals df_ydays_means_stdevs[&#39;ci_68_lower&#39;] = df_ydays_means_stdevs[&#39;mean&#39;] - df_ydays_means_stdevs[&#39;stdev&#39;] df_ydays_means_stdevs[&#39;ci_68_upper&#39;] = df_ydays_means_stdevs[&#39;mean&#39;] + df_ydays_means_stdevs[&#39;stdev&#39;] df_ydays_means_stdevs[&#39;ci_95_lower&#39;] = df_ydays_means_stdevs[&#39;mean&#39;] - 2 * df_ydays_means_stdevs[&#39;stdev&#39;] df_ydays_means_stdevs[&#39;ci_95_upper&#39;] = df_ydays_means_stdevs[&#39;mean&#39;] + 2 * df_ydays_means_stdevs[&#39;stdev&#39;] df_ydays_means_stdevs # Combine yday, mean, stdev into new dataframe #print(means) #print(stdevs) #df_precovid.rolling() #st.t.interval(0.95, len(df_precovid)-1, loc=np.mean(df_precovid[&#39;deaths&#39;])) #alt.Chart(df_precovid).mark_line().encode( # alt.X(&#39;first_day:yday&#39;, type=&#39;quantitative&#39;), # alt.Y(&#39;deaths&#39;, type=&#39;quantitative&#39;) #) . yday mean stdev sample_size ci_68_lower ci_68_upper ci_95_lower ci_95_upper . 0 1 | 3000.297619 | 255.638241 | 84 | 2744.659378 | 3255.935860 | 2489.021137 | 3511.574101 | . 1 2 | 3000.190476 | 256.394438 | 84 | 2743.796038 | 3256.584914 | 2487.401600 | 3512.979352 | . 2 3 | 3003.333333 | 253.830763 | 84 | 2749.502570 | 3257.164096 | 2495.671807 | 3510.994859 | . 3 4 | 3006.904762 | 257.439880 | 84 | 2749.464881 | 3264.344642 | 2492.025001 | 3521.784523 | . 4 5 | 3003.273810 | 264.518902 | 84 | 2738.754908 | 3267.792711 | 2474.236006 | 3532.311613 | . 5 6 | 3008.416667 | 266.642679 | 84 | 2741.773988 | 3275.059346 | 2475.131309 | 3541.702025 | . 6 7 | 3007.821429 | 266.650268 | 84 | 2741.171161 | 3274.471696 | 2474.520893 | 3541.121964 | . 7 8 | 3017.571429 | 269.975380 | 84 | 2747.596049 | 3287.546808 | 2477.620669 | 3557.522188 | . 8 9 | 3018.761905 | 267.963926 | 84 | 2750.797979 | 3286.725831 | 2482.834053 | 3554.689756 | . 9 10 | 3023.761905 | 267.219806 | 84 | 2756.542099 | 3290.981710 | 2489.322293 | 3558.201516 | . 10 11 | 3026.500000 | 271.335319 | 84 | 2755.164681 | 3297.835319 | 2483.829362 | 3569.170638 | . 11 12 | 3020.750000 | 278.144839 | 84 | 2742.605161 | 3298.894839 | 2464.460323 | 3577.039677 | . 12 13 | 3016.860465 | 279.674481 | 86 | 2737.185984 | 3296.534947 | 2457.511502 | 3576.209428 | . 13 14 | 3015.528090 | 276.505881 | 89 | 2739.022209 | 3292.033971 | 2462.516329 | 3568.539851 | . 14 15 | 3015.731183 | 275.054625 | 93 | 2740.676558 | 3290.785807 | 2465.621934 | 3565.840432 | . 15 16 | 3010.968750 | 273.240879 | 96 | 2737.727871 | 3284.209629 | 2464.486992 | 3557.450508 | . 16 17 | 3010.590000 | 270.157758 | 100 | 2740.432242 | 3280.747758 | 2470.274485 | 3550.905515 | . 17 18 | 3010.567308 | 269.355281 | 104 | 2741.212027 | 3279.922588 | 2471.856746 | 3549.277869 | . 18 19 | 3001.548077 | 271.557031 | 104 | 2729.991046 | 3273.105108 | 2458.434015 | 3544.662138 | . 19 20 | 2998.048544 | 265.837868 | 103 | 2732.210676 | 3263.886412 | 2466.372807 | 3529.724280 | . 20 21 | 2993.980583 | 259.994494 | 103 | 2733.986089 | 3253.975076 | 2473.991595 | 3513.969570 | . 21 22 | 2991.701923 | 262.687007 | 104 | 2729.014916 | 3254.388930 | 2466.327909 | 3517.075937 | . 22 23 | 2982.660194 | 255.014938 | 103 | 2727.645256 | 3237.675132 | 2472.630318 | 3492.690071 | . 23 24 | 2980.586538 | 254.810061 | 104 | 2725.776477 | 3235.396599 | 2470.966416 | 3490.206660 | . 24 25 | 2977.615385 | 259.788611 | 104 | 2717.826773 | 3237.403996 | 2458.038162 | 3497.192607 | . 25 26 | 2973.096154 | 263.159353 | 104 | 2709.936801 | 3236.255507 | 2446.777448 | 3499.414860 | . 26 27 | 2967.436893 | 256.594808 | 103 | 2710.842085 | 3224.031701 | 2454.247277 | 3480.626509 | . 27 28 | 2966.533981 | 252.226237 | 103 | 2714.307743 | 3218.760218 | 2462.081506 | 3470.986455 | . 28 29 | 2963.634615 | 255.655565 | 104 | 2707.979050 | 3219.290181 | 2452.323485 | 3474.945746 | . 29 30 | 2956.038835 | 245.187080 | 103 | 2710.851755 | 3201.225915 | 2465.664674 | 3446.412996 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 336 337 | 2758.942308 | 169.198902 | 104 | 2589.743406 | 2928.141210 | 2420.544503 | 3097.340112 | . 337 338 | 2770.233010 | 174.027055 | 103 | 2596.205955 | 2944.260064 | 2422.178900 | 3118.287119 | . 338 339 | 2782.009615 | 177.200972 | 104 | 2604.808644 | 2959.210587 | 2427.607672 | 3136.411559 | . 339 340 | 2789.932692 | 175.027280 | 104 | 2614.905412 | 2964.959973 | 2439.878132 | 3139.987253 | . 340 341 | 2800.019231 | 182.808456 | 104 | 2617.210775 | 2982.827687 | 2434.402318 | 3165.636143 | . 341 342 | 2803.291262 | 181.040491 | 103 | 2622.250771 | 2984.331753 | 2441.210280 | 3165.372244 | . 342 343 | 2810.621359 | 182.847527 | 103 | 2627.773833 | 2993.468886 | 2444.926306 | 3176.316412 | . 343 344 | 2813.615385 | 180.810382 | 104 | 2632.805002 | 2994.425767 | 2451.994620 | 3175.236149 | . 344 345 | 2824.631068 | 181.296582 | 103 | 2643.334486 | 3005.927650 | 2462.037903 | 3187.224233 | . 345 346 | 2832.125000 | 182.010652 | 104 | 2650.114348 | 3014.135652 | 2468.103696 | 3196.146304 | . 346 347 | 2837.509615 | 179.724816 | 104 | 2657.784799 | 3017.234432 | 2478.059983 | 3196.959248 | . 347 348 | 2849.528846 | 191.325827 | 104 | 2658.203019 | 3040.854673 | 2466.877193 | 3232.180500 | . 348 349 | 2855.693069 | 191.042600 | 101 | 2664.650470 | 3046.735669 | 2473.607870 | 3237.778268 | . 349 350 | 2859.193878 | 192.685934 | 98 | 2666.507943 | 3051.879812 | 2473.822009 | 3244.565746 | . 350 351 | 2862.084211 | 193.489604 | 95 | 2668.594606 | 3055.573815 | 2475.105002 | 3249.063419 | . 351 352 | 2869.725275 | 192.049766 | 91 | 2677.675509 | 3061.775041 | 2485.625743 | 3253.824806 | . 352 353 | 2876.170455 | 190.315903 | 88 | 2685.854551 | 3066.486358 | 2495.538648 | 3256.802261 | . 353 354 | 2882.416667 | 189.423807 | 84 | 2692.992860 | 3071.840473 | 2503.569053 | 3261.264280 | . 354 355 | 2902.107143 | 205.846885 | 84 | 2696.260258 | 3107.954028 | 2490.413372 | 3313.800913 | . 355 356 | 2911.583333 | 215.191269 | 84 | 2696.392065 | 3126.774602 | 2481.200796 | 3341.965871 | . 356 357 | 2926.380952 | 222.466887 | 84 | 2703.914065 | 3148.847839 | 2481.447179 | 3371.314726 | . 357 358 | 2930.916667 | 224.519579 | 84 | 2706.397088 | 3155.436245 | 2481.877510 | 3379.955824 | . 358 359 | 2949.500000 | 231.965852 | 84 | 2717.534148 | 3181.465852 | 2485.568295 | 3413.431705 | . 359 360 | 2954.630952 | 232.734234 | 84 | 2721.896719 | 3187.365186 | 2489.162485 | 3420.099420 | . 360 361 | 2966.059524 | 230.946265 | 84 | 2735.113259 | 3197.005788 | 2504.166995 | 3427.952053 | . 361 362 | 2978.690476 | 233.487957 | 84 | 2745.202519 | 3212.178433 | 2511.714563 | 3445.666390 | . 362 363 | 2981.976190 | 240.400618 | 84 | 2741.575572 | 3222.376809 | 2501.174954 | 3462.777427 | . 363 364 | 2990.297619 | 243.454891 | 84 | 2746.842728 | 3233.752510 | 2503.387837 | 3477.207401 | . 364 366 | 2990.571429 | 243.182429 | 84 | 2747.389000 | 3233.753857 | 2504.206571 | 3476.936286 | . 365 366 | 2990.571429 | 243.182429 | 84 | 2747.389000 | 3233.753857 | 2504.206571 | 3476.936286 | . 366 rows × 8 columns . legend_selection = alt.selection_multi(fields=[&#39;first_day:year&#39;], bind=&#39;legend&#39;) # Plots a single line for every year in an interactive chart df[&#39;line_size&#39;] = df.apply(lambda row: 0.5 if row[&#39;first_day:year&#39;] != 2020 else 1, axis = 1) df_recent = df[df[&#39;first_day:year&#39;] &gt; 2015] line = alt.Chart(df).mark_line().encode( alt.X( &#39;first_day:yday&#39;, type=&#39;quantitative&#39;, title=&#39;Day of the year (week following)&#39;, scale=alt.Scale(domain=(1, 366)) ), alt.Y(&#39;deaths&#39;, type=&#39;quantitative&#39;, title=&#39;Number of deaths&#39;), # Documentation on available colour schemes in Vega: https://vega.github.io/vega/docs/schemes/ alt.Color(&#39;first_day:year&#39;, type=&#39;ordinal&#39;, scale=alt.Scale(scheme=&#39;yellowgreenblue&#39;), title=&#39;Year&#39;), # Enable selection of series (years) from the legend opacity=alt.condition(legend_selection, alt.value(1), alt.value(0.3)), # Display tooltips tooltip=[alt.Tooltip(&#39;country&#39;, title=&#39;Country&#39;), alt.Tooltip(&#39;first_day&#39;, title=&#39;Week starting&#39;), alt.Tooltip(&#39;deaths&#39;, title=&#39;Number of deaths&#39;) ], size = alt.condition(legend_selection, alt.value(1.5), alt.value(0.7)) ).properties( width=800 ).interactive().add_selection(legend_selection) #.add_selection(alt.selection_interval(bind=&#39;scales&#39;)) ci68_band = alt.Chart(df_ydays_means_stdevs).mark_area( opacity = 0.3, color = &#39;goldenrod&#39; ).encode( x = &#39;yday&#39;, y = &#39;ci_68_lower&#39;, y2 = &#39;ci_68_upper&#39;, ) ci95_band = alt.Chart(df_ydays_means_stdevs).mark_area( opacity = 0.2, color = &#39;goldenrod&#39; ).encode( x = &#39;yday&#39;, y = &#39;ci_95_lower&#39;, y2 = &#39;ci_95_upper&#39;, ) mean_line = alt.Chart(df_ydays_means_stdevs).mark_line( strokeDash=[3,5], color = &#39;black&#39;, opacity = 0.5, size = 1 ).encode( x = &#39;yday&#39;, y = &#39;mean&#39; ) #band = alt.Chart(df).mark_errorband(extent=&#39;ci&#39;).encode( # x = &#39;first_day&#39;, # y = &#39;deaths&#39; #) line + ci68_band + ci95_band + mean_line .",
            "url": "https://sj.github.io/covid19-excess-deaths-fastpages/fastpages/jupyter/covid19/2020/05/03/covid19-excess-deaths.html",
            "relUrl": "/fastpages/jupyter/covid19/2020/05/03/covid19-excess-deaths.html",
            "date": " • May 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sj.github.io/covid19-excess-deaths-fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post (updated)",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sj.github.io/covid19-excess-deaths-fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sj.github.io/covid19-excess-deaths-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sj.github.io/covid19-excess-deaths-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}